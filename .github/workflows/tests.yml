name: VoyageurCompass Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_voyageur_compass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      DJANGO_SETTINGS_MODULE: VoyageurCompass.settings
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_voyageur_compass
      REDIS_URL: redis://localhost:6379/0
      SECRET_KEY: test-secret-key-for-ci

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-django

    - name: Run Django checks
      run: python manage.py check

    - name: Run migrations
      run: python manage.py migrate

    - name: Run backend tests
      run: |
        pytest --cov=Data --cov=Analytics --cov=Core \
               --cov-report=xml --cov-report=term-missing \
               --cov-branch --cov-fail-under=70 -v

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: Design/frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd Design/frontend
        npm ci

    - name: Run frontend linting
      run: |
        cd Design/frontend
        npm run lint

    - name: Run frontend tests
      run: |
        cd Design/frontend
        npm run test:coverage

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./Design/frontend/coverage/clover.xml
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_voyageur_compass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      DJANGO_SETTINGS_MODULE: VoyageurCompass.settings
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_voyageur_compass
      REDIS_URL: redis://localhost:6379/0
      SECRET_KEY: test-secret-key-for-ci

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-django

    - name: Run migrations
      run: python manage.py migrate

    - name: Run integration tests
      run: |
        pytest tests/test_integration.py -v --tb=short

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: bandit -r . -x tests/,Design/frontend/

    - name: Check for known security vulnerabilities
      run: safety check --json || true

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Run Black formatting check
      run: black --check --diff .

    - name: Run isort import sorting check
      run: isort --check-only --diff .

    - name: Run Flake8 linting
      run: flake8 . --max-line-length=88 --extend-ignore=E203,W503

    - name: Set up Node.js for frontend quality checks
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: Design/frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd Design/frontend
        npm ci

    - name: Run frontend linting
      run: |
        cd Design/frontend
        npm run lint

  build-test:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker images
      run: |
        docker compose -f docker compose.yml build --no-cache

    - name: Test Docker stack
      run: |
        docker compose -f docker compose.yml up -d
        sleep 30
        docker compose -f docker compose.yml ps
        docker compose -f docker compose.yml logs
        docker compose -f docker compose.yml down

  notify:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, security-scan, code-quality, build-test]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success'
      run: echo "✅ All tests passed successfully!"

    - name: Notify failure
      if: needs.backend-tests.result == 'failure' || needs.frontend-tests.result == 'failure'
      run: |
        echo "❌ Tests failed!"
        exit 1