services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: voyageur-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./certs:/etc/nginx/certs:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
    depends_on:
      - backend
      - frontend
    networks:
      - voyageur-network
    environment:
      - NGINX_HOST=${NGINX_HOST:-localhost}
      - NGINX_PORT=443
  db:
    image: postgres:15-alpine
    container_name: voyageur-db
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    environment:
      - POSTGRES_DB=${DB_NAME:-voyageur_compass_db}
      - POSTGRES_USER=${DB_USER:-voyageur_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-voyageur_user} -d ${DB_NAME:-voyageur_compass_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - voyageur-network

  redis:
    image: redis:alpine
    container_name: voyageur-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - voyageur-network

  backend:
    build:
      context: ..
      dockerfile: infrastructure/Dockerfile.base
    container_name: voyageur-backend
    restart: unless-stopped
    profiles: ["cpu"]
    volumes:
      - ..:/app:delegated
      - /app/Design/frontend/node_modules
      - static_volume:/app/staticfiles
      - media_volume:/app/Design/media
      - huggingface_cache:/home/voyageur/.cache/huggingface
    ports:
      - "8000:8000"
    env_file:
      - ../.env
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - DEBUG=${DEBUG:-True}
      - CI=True
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - APP_ENV=${APP_ENV:-development}
      - SENTRY_DSN=${SENTRY_DSN:-}
      - SENTRY_TRACES_SAMPLE_RATE=${SENTRY_TRACES_SAMPLE_RATE:-0.1}
      - SECURE_SSL_REDIRECT=${SECURE_SSL_REDIRECT:-False}
      - SESSION_COOKIE_SECURE=${SESSION_COOKIE_SECURE:-False}
      - CSRF_COOKIE_SECURE=${CSRF_COOKIE_SECURE:-False}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://127.0.0.1:3000}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS:-}
      - SECURE_HSTS_SECONDS=${SECURE_HSTS_SECONDS:-0}
      - OLLAMA_HOST=ollama
      - OLLAMA_PORT=11434
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        while ! nc -z db 5432; do sleep 1; done &&
        echo 'Database is ready!' &&
        echo 'Waiting for Redis...' &&
        while ! nc -z redis 6379; do sleep 1; done &&
        echo 'Redis is ready!' &&
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/login/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - voyageur-network

  backend-gpu:
    build:
      context: ..
      dockerfile: infrastructure/Dockerfile.ml
    container_name: voyageur-backend-gpu
    restart: unless-stopped
    profiles: ["gpu"]
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    volumes:
      - ..:/app:delegated
      - /app/Design/frontend/node_modules
      - static_volume:/app/staticfiles
      - media_volume:/app/Design/media
      - huggingface_cache:/home/voyageur/.cache/huggingface
    ports:
      - "8000:8000"
    env_file:
      - ../.env
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - DEBUG=${DEBUG:-True}
      - CI=True
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - APP_ENV=${APP_ENV:-development}
      - SENTRY_DSN=${SENTRY_DSN:-}
      - SENTRY_TRACES_SAMPLE_RATE=${SENTRY_TRACES_SAMPLE_RATE:-0.1}
      - SECURE_SSL_REDIRECT=${SECURE_SSL_REDIRECT:-False}
      - SESSION_COOKIE_SECURE=${SESSION_COOKIE_SECURE:-False}
      - CSRF_COOKIE_SECURE=${CSRF_COOKIE_SECURE:-False}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://127.0.0.1:3000}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS:-}
      - SECURE_HSTS_SECONDS=${SECURE_HSTS_SECONDS:-0}
      - OLLAMA_HOST=ollama
      - OLLAMA_PORT=11434
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        while ! nc -z db 5432; do sleep 1; done &&
        echo 'Database is ready!' &&
        echo 'Waiting for Redis...' &&
        while ! nc -z redis 6379; do sleep 1; done &&
        echo 'Redis is ready!' &&
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/login/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - voyageur-network

  celery_worker:
    build:
      context: ..
      dockerfile: infrastructure/Dockerfile
    container_name: voyageur-celery-worker
    restart: unless-stopped
    volumes:
      - ..:/app:delegated
      - /app/Design/frontend/node_modules
      - media_volume:/app/Design/media
      - huggingface_cache:/home/voyageur/.cache/huggingface
    env_file:
      - ../.env
    environment:
      - DEBUG=${DEBUG:-True}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - C_FORCE_ROOT=true
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        while ! nc -z db 5432; do sleep 1; done &&
        echo 'Waiting for Redis...' &&
        while ! nc -z redis 6379; do sleep 1; done &&
        echo 'Starting Celery Worker...' &&
        celery -A VoyageurCompass worker -l info --concurrency=2
      "
    healthcheck:
      test: ["CMD", "celery", "-A", "VoyageurCompass", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - voyageur-network

  celery_beat:
    build:
      context: ..
      dockerfile: infrastructure/Dockerfile
    container_name: voyageur-celery-beat
    restart: unless-stopped
    volumes:
      - ..:/app:delegated
      - /app/Design/frontend/node_modules
      - celerybeat_schedule:/app/celerybeat-schedule
      - huggingface_cache:/home/voyageur/.cache/huggingface
    env_file:
      - ../.env
    environment:
      - DEBUG=${DEBUG:-True}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        while ! nc -z db 5432; do sleep 1; done &&
        echo 'Waiting for Redis...' &&
        while ! nc -z redis 6379; do sleep 1; done &&
        echo 'Starting Celery Beat...' &&
        celery -A VoyageurCompass beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
      "
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis', port=6379, db=1); r.ping(); print('healthy')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - voyageur-network

  ollama:
    image: ollama/ollama:latest
    container_name: voyageur-ollama
    restart: unless-stopped
    profiles: ["gpu"]
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_MODELS=/root/.ollama/models
      - OLLAMA_NUM_PARALLEL=2
      - OLLAMA_MAX_LOADED_MODELS=3
      - OLLAMA_GPU_MEMORY_FRACTION=0.8
      - CUDA_VISIBLE_DEVICES=0
      # Multi-model configuration
      - OLLAMA_SUMMARY_MODEL=${OLLAMA_SUMMARY_MODEL:-phi3:3.8b}
      - OLLAMA_STANDARD_MODEL=${OLLAMA_STANDARD_MODEL:-phi3:3.8b}  
      - OLLAMA_DETAILED_MODEL=${OLLAMA_DETAILED_MODEL:-llama3.1:8b}
      - OLLAMA_TRANSLATION_MODEL=${OLLAMA_TRANSLATION_MODEL:-qwen2:3b}
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - voyageur-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
          memory: 16G
        limits:
          memory: 64G

  frontend:
    build:
      context: ../Design/frontend
      dockerfile: Dockerfile
    container_name: voyageur-frontend
    restart: unless-stopped
    volumes:
      - ../Design/frontend:/app:delegated
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8000/api/v1
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend
    stdin_open: true
    tty: true
    networks:
      - voyageur-network

volumes:
  postgres_data:
    name: voyageur_postgres_data
  redis_data:
    name: voyageur_redis_data
  static_volume:
    name: voyageur_static
  media_volume:
    name: voyageur_media
  celerybeat_schedule:
    name: voyageur_celerybeat_schedule
  ollama_data:
    name: voyageur_ollama_data
  huggingface_cache:
    name: voyageur_huggingface_cache

networks:
  voyageur-network:
    name: voyageur-network
    driver: bridge